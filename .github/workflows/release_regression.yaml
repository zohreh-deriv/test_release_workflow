name: Release Regression Workflow

on:
  create:
    branches:
      - release-v**
  issue_comment:
    types: [created]

jobs:
  generate_regression:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'create' && startsWith(github.ref, 'refs/heads/release-v')) ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, 'trigger-regression'))
    permissions:
      contents: write
      pull-requests: read
      issues: read

    steps:
      - name: Check user permissions
        id: check_permissions
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const username = context.payload.comment.user.login;

            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner,
                repo,
                username,
              });
              
              if (!['admin', 'write'].includes(permission.permission)) {
                core.setFailed('User does not have write access to the repository');
                return false;
              }
              return true;
            } catch (error) {
              core.setFailed('Failed to check user permissions');
              return false;
            }

      - name: Get PR Details and Validate
        if: |
          github.event_name == 'issue_comment' && 
          steps.check_permissions.outputs.result == 'true'
        id: pr_details
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;

            // Fetch PR details
            const prResponse = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: context.issue.number
            });

            const prTitle = prResponse.data.title;
            console.log('PR Title:', prTitle);

            // Validate PR title
            if (!prTitle.startsWith('chore: sync branches')) {
              core.setFailed('PR title does not start with "chore: sync branches"');
              return false;
            }

            // Extract version from PR title
            const versionMatch = prTitle.match(/version\s+(\d+\.\d+\.\d+)(?:\+\d+)?/);
            if (!versionMatch) {
              core.setFailed('Could not extract version from PR title');
              return false;
            }
            const version = versionMatch[1];
            console.log('Extracted version:', version);

            // Fetch all branches with pagination
            let branches = [];
            let page = 1;
            while (true) {
              const { data } = await github.rest.repos.listBranches({
                owner,
                repo,
                per_page: 100,
                page
              });
              branches = branches.concat(data);
              if (data.length < 100) break;
              page++;
            }

            console.log('Available branches:', branches.map(b => b.name));

            const branchPrefix = `release-v${version}`;
            console.log('Looking for branch prefix:', branchPrefix);

            const releaseBranch = branches.find(branch => {
              console.log('Checking branch:', branch.name, 'starts with', branchPrefix, ':', branch.name.startsWith(branchPrefix));
              return branch.name.startsWith(branchPrefix);
            });

            if (!releaseBranch) {
              core.setFailed(`No branch found starting with: ${branchPrefix}`);
              return false;
            }

            console.log('Found matching branch:', releaseBranch.name);

            core.setOutput('release_branch', releaseBranch.name);
            core.setOutput('version', version);
            return { 
              ref: prResponse.data.head.ref,
              version: version,
              releaseBranch: releaseBranch.name
            };

      - name: Checkout code
        if: |
          (github.event_name == 'create' && steps.check_permissions.outputs.result == 'true') || 
          (github.event_name == 'issue_comment' && steps.check_permissions.outputs.result == 'true' && steps.pr_details.outcome == 'success')
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ref: ${{ github.event_name == 'create' && github.ref || steps.pr_details.outputs.release_branch }}

      - name: Get branch name and version
        if: steps.check_permissions.outputs.result == 'true'
        id: branch_info
        run: |
          if [ "${{ github.event_name }}" = "create" ]; then
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            APP_VERSION=${BRANCH_NAME#release-v}
          else
            BRANCH_NAME="${{ steps.pr_details.outputs.release_branch }}"
            APP_VERSION="${{ steps.pr_details.outputs.version }}"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT

      - name: Update pubspec version
        if: |
          github.event_name == 'create' && 
          steps.check_permissions.outputs.result == 'true'
        run: |
          sed -i "s/^version: .*/version: ${{ steps.branch_info.outputs.app_version }}/" pubspec.yaml

      - name: Commit and push the version update and create a Pull Request to master
        if: |
          github.event_name == 'create' && 
          steps.check_permissions.outputs.result == 'true'
        uses: peter-evans/create-pull-request@76c6f5c20e2111bfee3cd30fae52a25e410f5efc
        with:
          token: ${{ secrets.MOBILE_APPS_PAT }}
          title: "chore: sync branches, merge release version ${{ steps.branch_info.outputs.app_version }} into master"
          branch: ${{ steps.branch_info.outputs.branch_name }}
          commit-message: "chore: update app version to ${{ steps.branch_info.outputs.app_version }}"
          base: master

      - name: Generate unique tag name
        if: steps.check_permissions.outputs.result == 'true'
        id: tag_info
        run: |

          DATE=$(date +'%d-%m-%Y')
          BASE_TAG="firebase-${DATE}-${{ steps.branch_info.outputs.app_version }}"
          if ! git rev-parse "$BASE_TAG" >/dev/null 2>&1; then
            echo "tag_name=$BASE_TAG" >> $GITHUB_OUTPUT
          else
            counter=1
            while git rev-parse "$BASE_TAG+$counter" >/dev/null 2>&1; do
              counter=$((counter + 1))
            done
            echo "tag_name=$BASE_TAG+$counter" >> $GITHUB_OUTPUT
          fi

      - name: Create Release Tag
        if: steps.check_permissions.outputs.result == 'true'
        uses: softprops/action-gh-release@7b4da11513bf3f43f9999e90eabced41ab8bb048
        env:
          GITHUB_TOKEN: ${{ secrets.MOBILE_APPS_PAT }}
        with:
          tag_name: ${{ steps.tag_info.outputs.tag_name }}
          release_name: ${{ steps.tag_info.outputs.tag_name }}
          draft: false
          generate_release_notes: true
          prerelease: true
          make_latest: false

      - name: Wait for Bitrise Build
        if: steps.check_permissions.outputs.result == 'true'
        id: wait_build
        env:
          BITRISE_APP_ID: ${{ secrets.BITRISE_APP_ID }}
          BITRISE_PAT: ${{ secrets.BITRISE_PAT }}
        run: |
          # Wait for build to appear (it might take a few seconds after tag creation)
          sleep 30

          # Initialize build_slug as empty
          BUILD_SLUG=""

          # First, find the build with matching tag
          while [ -z "$BUILD_SLUG" ]; do
            echo "Searching for build with tag: ${{ steps.tag_info.outputs.tag_name }}"
            
            # Get recent builds
            BUILDS=$(curl -s https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds?limit=10 \
              --header "Authorization: $BITRISE_PAT")
            
            # Check if response contains data array
            if ! echo "$BUILDS" | jq -e '.data' > /dev/null; then
              echo "Error: API response does not contain 'data' array"
              echo "Full API Response:"
              echo "$BUILDS"
              echo "Waiting 30 seconds before retry..."
              sleep 30
              continue
            fi
            
            # Extract build slug and number for the matching tag
            BUILD_INFO=$(echo "$BUILDS" | jq -r --arg TAG "${{ steps.tag_info.outputs.tag_name }}" \
              '.data[] | select(.tag == $TAG) | {slug: .slug, build_number: .build_number}' | jq -s '.[0]')
            
            if [ -n "$BUILD_INFO" ] && [ "$BUILD_INFO" != "null" ]; then
              BUILD_SLUG=$(echo "$BUILD_INFO" | jq -r '.slug')
              BUILD_NUMBER=$(echo "$BUILD_INFO" | jq -r '.build_number')
              echo "Found build! Slug: $BUILD_SLUG, Number: $BUILD_NUMBER"
              echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
            else
              echo "No build found yet. Waiting 30 seconds..."
              sleep 30
            fi
          done

          # Now that we have the build slug, only check this specific build's status
          while true; do
            echo "Checking status of build: $BUILD_NUMBER"
            
            # Get status of specific build
            BUILD_STATUS=$(curl -s "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$BUILD_SLUG" \
              --header "Authorization: $BITRISE_PAT" | jq -r '.data.status_text')
            
            echo "Current build status: $BUILD_STATUS"
            
            if [ "$BUILD_STATUS" = "success" ]; then
              echo "Build succeeded!"
              exit 0
            elif [ "$BUILD_STATUS" = "failed" ] || [ "$BUILD_STATUS" = "aborted" ]; then
              echo "Build failed with status: $BUILD_STATUS"
              exit 1
            fi
            
            echo "Build still in progress. Waiting 30 seconds..."
            sleep 30
          done

      # - name: Send Success Slack Notification
      #   if: steps.wait_build.outcome == 'success'
      #   uses: ./.github/actions/regression_notif
      #   with:
      #     SLACK_WEBHOOK_URL: ${{ secrets.RELEASE_SLACK_WEBHOOK_URL }}
      #     NEW_VERSION: ${{ steps.branch_info.outputs.app_version }}
      #     BUILD_NUMBER: ${{ steps.wait_build.outputs.build_number }}

      - name: Comment on PR if validation fails
        if: |
          github.event_name == 'issue_comment' && 
          (steps.check_permissions.outputs.result == 'false' || steps.pr_details.outcome == 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            let message = '';

            if (steps.check_permissions.outputs.result == 'false') {
              message = '❌ Unable to trigger regression release: You do not have write access to this repository.';
            } else if (!context.payload.issue.pull_request) {
              message = '❌ This comment is not on a pull request.';
            } else if (steps.pr_details.outcome == 'failure') {
              message = '❌ Validation failed.\n' +
                       'You\'re not able to trigger a regression workflow on this PR.';
            }

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number,
              body: message
            });
